
import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.*;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.util.*;
import java.util.zip.*;

public class SecurePack {

    private static final String RECORD_FILE = "records.txt";
    private static final int AES_KEY_SIZE = 16; // 128 bits = 16 bytes
    private static final int GCM_IV_LENGTH = 12; // 12 bytes
    private static final int GCM_TAG_LENGTH = 16; // 16 bytes

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        System.out.println("1: Crear empaquetado\n2: Desencriptar");
        int option = sc.nextInt();
        sc.nextLine(); // limpiar buffer

        if(option == 1) {
            createPackage();
        } else if(option == 2) {
            decryptPackage();
        } else {
            System.out.println("Opción inválida");
        }
    }

    // ================= CREAR EMPAQUETADO =================
    private static void createPackage() throws Exception {
        File folder = new File("data/comprimir");
        if(!folder.exists() || !folder.isDirectory()) {
            System.out.println("Carpeta data/comprimir no encontrada.");
            return;
        }

        Scanner sc = new Scanner(System.in);
        System.out.println("Ingresa una clave AES:");
        String password = sc.nextLine();
        SecretKeySpec key = getAESKeyFromPassword(password);

        // Crear ZIP en memoria
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ZipOutputStream zos = new ZipOutputStream(baos);

        Map<String, String> fileChecksums = new HashMap<>();

        for(File file : Objects.requireNonNull(folder.listFiles())) {
            if(file.isFile()) {
                byte[] content = Files.readAllBytes(file.toPath());

                // Calcular checksum SHA-256
                String checksum = sha256(content);
                fileChecksums.put(file.getName(), checksum);

                // Comprimir archivo
                ZipEntry entry = new ZipEntry(file.getName());
                zos.putNextEntry(entry);
                zos.write(content);
                zos.closeEntry();
            }
        }
        zos.close();

        byte[] compressedData = baos.toByteArray();

        // Cifrar con AES-GCM
        byte[] iv = new byte[GCM_IV_LENGTH];
        new SecureRandom().nextBytes(iv);

        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
        GCMParameterSpec spec = new GCMParameterSpec(GCM_TAG_LENGTH*8, iv);
        cipher.init(Cipher.ENCRYPT_MODE, key, spec);
        byte[] encrypted = cipher.doFinal(compressedData);

        // Crear nombre de paquete único con UUID
        String packageName = "package_" + UUID.randomUUID() + ".secure";

        // Guardar empaquetado en raíz del proyecto
        FileOutputStream fos = new FileOutputStream(packageName);
        fos.write(iv);          // primero IV
        fos.write(encrypted);   // luego datos cifrados
        fos.close();

        // Guardar registros en archivo local
        try(PrintWriter pw = new PrintWriter(new FileWriter(RECORD_FILE, true))) {
            for(Map.Entry<String, String> e : fileChecksums.entrySet()) {
                pw.println(packageName + "," + e.getKey() + "," + e.getValue() + "," + sha256(password.getBytes()));
            }
        }

        System.out.println("Empaquetado creado: " + packageName);
    }

    // ================= DESENCRIPTAR EMPAQUETADO =================
    private static void decryptPackage() throws Exception {
        Scanner sc = new Scanner(System.in);
        System.out.println("Ingresa el nombre del paquete (ej: package_xxx.secure):");
        String packageName = sc.nextLine();

        System.out.println("Ingresa la clave AES:");
        String password = sc.nextLine();
        SecretKeySpec key = getAESKeyFromPassword(password);

        // Leer archivo empaquetado
        byte[] fileBytes = Files.readAllBytes(Paths.get(packageName));
        byte[] iv = Arrays.copyOfRange(fileBytes, 0, GCM_IV_LENGTH);
        byte[] encrypted = Arrays.copyOfRange(fileBytes, GCM_IV_LENGTH, fileBytes.length);

        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
        GCMParameterSpec spec = new GCMParameterSpec(GCM_TAG_LENGTH*8, iv);
        cipher.init(Cipher.DECRYPT_MODE, key, spec);

        byte[] decompressedBytes;
        try {
            decompressedBytes = cipher.doFinal(encrypted);
        } catch(Exception e) {
            System.out.println("Clave incorrecta o archivo corrupto.");
            return;
        }

        // Carpeta destino = data/descomprimido/(nombre del paquete sin .secure)/
        String baseName = packageName.replace(".secure", "");
        Path outputDir = Paths.get("data/descomprimido/" + baseName);
        Files.createDirectories(outputDir);

        // Extraer archivos de ZIP
        ByteArrayInputStream bais = new ByteArrayInputStream(decompressedBytes);
        ZipInputStream zis = new ZipInputStream(bais);
        ZipEntry entry;
        while((entry = zis.getNextEntry()) != null) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int len;
            while((len = zis.read(buffer)) > 0) {
                baos.write(buffer, 0, len);
            }
            byte[] content = baos.toByteArray();
            zis.closeEntry();

            // Verificar checksum contra archivo local
            String storedHash = findRecord(packageName, entry.getName(), sha256(password.getBytes()));
            if(storedHash == null) {
                System.out.println("Archivo " + entry.getName() + " no registrado o clave incorrecta.");
                continue;
            }
            String checksum = sha256(content);
            if(!checksum.equals(storedHash)) {
                System.out.println("Archivo " + entry.getName() + " corrupto!");
                continue;
            }

            // Guardar archivo restaurado en carpeta correspondiente
            Path fileOut = outputDir.resolve(entry.getName());
            Files.write(fileOut, content);
            System.out.println("Archivo restaurado: " + fileOut);
        }
        zis.close();
    }

    // ================= FUNCIONES AUXILIARES =================
    private static SecretKeySpec getAESKeyFromPassword(String password) throws Exception {
        byte[] keyBytes = Arrays.copyOf(password.getBytes("UTF-8"), AES_KEY_SIZE);
        return new SecretKeySpec(keyBytes, "AES");
    }

    private static String sha256(byte[] data) throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(data);
        StringBuilder sb = new StringBuilder();
        for(byte b : hash) sb.append(String.format("%02x", b));
        return sb.toString();
    }

    private static String findRecord(String packageName, String fileName, String passwordHash) throws Exception {
        File f = new File(RECORD_FILE);
        if(!f.exists()) return null;
        try(BufferedReader br = new BufferedReader(new FileReader(f))) {
            String line;
            while((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if(parts.length == 4 && parts[0].equals(packageName) && parts[1].equals(fileName) && parts[3].equals(passwordHash)) {
                    return parts[2]; // devuelve checksum
                }
            }
        }
        return null;
    }
}